// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: user.proto

package userclient

import (
	"context"

	"micro-ping/service/user/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ReqGetInfo   = user.ReqGetInfo
	ReqGetMe     = user.ReqGetMe
	ReqLogin     = user.ReqLogin
	ReqLogout    = user.ReqLogout
	ReqSendCode  = user.ReqSendCode
	RespGetInfo  = user.RespGetInfo
	RespGetMe    = user.RespGetMe
	RespLogin    = user.RespLogin
	RespLogout   = user.RespLogout
	RespSendCode = user.RespSendCode
	UserInfo     = user.UserInfo

	User interface {
		SendCode(ctx context.Context, in *ReqSendCode, opts ...grpc.CallOption) (*RespSendCode, error)
		Login(ctx context.Context, in *ReqLogin, opts ...grpc.CallOption) (*RespLogin, error)
		LoginOut(ctx context.Context, in *ReqLogout, opts ...grpc.CallOption) (*RespLogout, error)
		GetMe(ctx context.Context, in *ReqGetMe, opts ...grpc.CallOption) (*RespGetMe, error)
		GetInfo(ctx context.Context, in *ReqGetInfo, opts ...grpc.CallOption) (*RespGetInfo, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) SendCode(ctx context.Context, in *ReqSendCode, opts ...grpc.CallOption) (*RespSendCode, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.SendCode(ctx, in, opts...)
}

func (m *defaultUser) Login(ctx context.Context, in *ReqLogin, opts ...grpc.CallOption) (*RespLogin, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUser) LoginOut(ctx context.Context, in *ReqLogout, opts ...grpc.CallOption) (*RespLogout, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.LoginOut(ctx, in, opts...)
}

func (m *defaultUser) GetMe(ctx context.Context, in *ReqGetMe, opts ...grpc.CallOption) (*RespGetMe, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetMe(ctx, in, opts...)
}

func (m *defaultUser) GetInfo(ctx context.Context, in *ReqGetInfo, opts ...grpc.CallOption) (*RespGetInfo, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetInfo(ctx, in, opts...)
}
