// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tbShopTypeFieldNames          = builder.RawFieldNames(&TbShopType{})
	tbShopTypeRows                = strings.Join(tbShopTypeFieldNames, ",")
	tbShopTypeRowsExpectAutoSet   = strings.Join(stringx.Remove(tbShopTypeFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tbShopTypeRowsWithPlaceHolder = strings.Join(stringx.Remove(tbShopTypeFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheHmdpTbShopTypeIdPrefix = "cache:hmdp:tbShopType:id:"
)

type (
	tbShopTypeModel interface {
		Insert(ctx context.Context, data *TbShopType) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*TbShopType, error)
		Update(ctx context.Context, data *TbShopType) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultTbShopTypeModel struct {
		sqlc.CachedConn
		table string
	}

	TbShopType struct {
		Id         uint64         `db:"id"`          // 主键
		Name       sql.NullString `db:"name"`        // 类型名称
		Icon       sql.NullString `db:"icon"`        // 图标
		Sort       sql.NullInt64  `db:"sort"`        // 顺序
		CreateTime time.Time      `db:"create_time"` // 创建时间
		UpdateTime time.Time      `db:"update_time"` // 更新时间
	}
)

func newTbShopTypeModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTbShopTypeModel {
	return &defaultTbShopTypeModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`tb_shop_type`",
	}
}

func (m *defaultTbShopTypeModel) Delete(ctx context.Context, id uint64) error {
	hmdpTbShopTypeIdKey := fmt.Sprintf("%s%v", cacheHmdpTbShopTypeIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, hmdpTbShopTypeIdKey)
	return err
}

func (m *defaultTbShopTypeModel) FindOne(ctx context.Context, id uint64) (*TbShopType, error) {
	hmdpTbShopTypeIdKey := fmt.Sprintf("%s%v", cacheHmdpTbShopTypeIdPrefix, id)
	var resp TbShopType
	err := m.QueryRowCtx(ctx, &resp, hmdpTbShopTypeIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbShopTypeRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbShopTypeModel) Insert(ctx context.Context, data *TbShopType) (sql.Result, error) {
	hmdpTbShopTypeIdKey := fmt.Sprintf("%s%v", cacheHmdpTbShopTypeIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, tbShopTypeRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.Icon, data.Sort)
	}, hmdpTbShopTypeIdKey)
	return ret, err
}

func (m *defaultTbShopTypeModel) Update(ctx context.Context, data *TbShopType) error {
	hmdpTbShopTypeIdKey := fmt.Sprintf("%s%v", cacheHmdpTbShopTypeIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tbShopTypeRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.Icon, data.Sort, data.Id)
	}, hmdpTbShopTypeIdKey)
	return err
}

func (m *defaultTbShopTypeModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheHmdpTbShopTypeIdPrefix, primary)
}

func (m *defaultTbShopTypeModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbShopTypeRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTbShopTypeModel) tableName() string {
	return m.table
}
