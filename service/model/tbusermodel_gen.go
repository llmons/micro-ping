// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tbUserFieldNames          = builder.RawFieldNames(&TbUser{})
	tbUserRows                = strings.Join(tbUserFieldNames, ",")
	tbUserRowsExpectAutoSet   = strings.Join(stringx.Remove(tbUserFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tbUserRowsWithPlaceHolder = strings.Join(stringx.Remove(tbUserFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheHmdpTbUserIdPrefix    = "cache:hmdp:tbUser:id:"
	cacheHmdpTbUserPhonePrefix = "cache:hmdp:tbUser:phone:"
)

type (
	tbUserModel interface {
		Insert(ctx context.Context, data *TbUser) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*TbUser, error)
		FindOneByPhone(ctx context.Context, phone string) (*TbUser, error)
		Update(ctx context.Context, data *TbUser) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultTbUserModel struct {
		sqlc.CachedConn
		table string
	}

	TbUser struct {
		Id         uint64    `db:"id"`          // 主键
		Phone      string    `db:"phone"`       // 手机号码
		Password   string    `db:"password"`    // 密码，加密存储
		NickName   string    `db:"nick_name"`   // 昵称，默认是用户id
		Icon       string    `db:"icon"`        // 人物头像
		CreateTime time.Time `db:"create_time"` // 创建时间
		UpdateTime time.Time `db:"update_time"` // 更新时间
	}
)

func newTbUserModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTbUserModel {
	return &defaultTbUserModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`tb_user`",
	}
}

func (m *defaultTbUserModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	hmdpTbUserIdKey := fmt.Sprintf("%s%v", cacheHmdpTbUserIdPrefix, id)
	hmdpTbUserPhoneKey := fmt.Sprintf("%s%v", cacheHmdpTbUserPhonePrefix, data.Phone)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, hmdpTbUserIdKey, hmdpTbUserPhoneKey)
	return err
}

func (m *defaultTbUserModel) FindOne(ctx context.Context, id uint64) (*TbUser, error) {
	hmdpTbUserIdKey := fmt.Sprintf("%s%v", cacheHmdpTbUserIdPrefix, id)
	var resp TbUser
	err := m.QueryRowCtx(ctx, &resp, hmdpTbUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbUserRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbUserModel) FindOneByPhone(ctx context.Context, phone string) (*TbUser, error) {
	hmdpTbUserPhoneKey := fmt.Sprintf("%s%v", cacheHmdpTbUserPhonePrefix, phone)
	var resp TbUser
	err := m.QueryRowIndexCtx(ctx, &resp, hmdpTbUserPhoneKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `phone` = ? limit 1", tbUserRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, phone); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbUserModel) Insert(ctx context.Context, data *TbUser) (sql.Result, error) {
	hmdpTbUserIdKey := fmt.Sprintf("%s%v", cacheHmdpTbUserIdPrefix, data.Id)
	hmdpTbUserPhoneKey := fmt.Sprintf("%s%v", cacheHmdpTbUserPhonePrefix, data.Phone)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, tbUserRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Phone, data.Password, data.NickName, data.Icon)
	}, hmdpTbUserIdKey, hmdpTbUserPhoneKey)
	return ret, err
}

func (m *defaultTbUserModel) Update(ctx context.Context, newData *TbUser) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	hmdpTbUserIdKey := fmt.Sprintf("%s%v", cacheHmdpTbUserIdPrefix, data.Id)
	hmdpTbUserPhoneKey := fmt.Sprintf("%s%v", cacheHmdpTbUserPhonePrefix, data.Phone)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tbUserRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Phone, newData.Password, newData.NickName, newData.Icon, newData.Id)
	}, hmdpTbUserIdKey, hmdpTbUserPhoneKey)
	return err
}

func (m *defaultTbUserModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheHmdpTbUserIdPrefix, primary)
}

func (m *defaultTbUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbUserRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTbUserModel) tableName() string {
	return m.table
}
