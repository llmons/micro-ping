// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tbShopFieldNames          = builder.RawFieldNames(&TbShop{})
	tbShopRows                = strings.Join(tbShopFieldNames, ",")
	tbShopRowsExpectAutoSet   = strings.Join(stringx.Remove(tbShopFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tbShopRowsWithPlaceHolder = strings.Join(stringx.Remove(tbShopFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheHmdpTbShopIdPrefix = "cache:hmdp:tbShop:id:"
)

type (
	tbShopModel interface {
		Insert(ctx context.Context, data *TbShop) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*TbShop, error)
		Update(ctx context.Context, data *TbShop) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultTbShopModel struct {
		sqlc.CachedConn
		table string
	}

	TbShop struct {
		Id         uint64         `db:"id"`          // 主键
		Name       string         `db:"name"`        // 商铺名称
		TypeId     uint64         `db:"type_id"`     // 商铺类型的id
		Images     string         `db:"images"`      // 商铺图片，多个图片以','隔开
		Area       sql.NullString `db:"area"`        // 商圈，例如陆家嘴
		Address    string         `db:"address"`     // 地址
		X          float64        `db:"x"`           // 经度
		Y          float64        `db:"y"`           // 维度
		AvgPrice   sql.NullInt64  `db:"avg_price"`   // 均价，取整数
		Sold       uint64         `db:"sold"`        // 销量
		Comments   uint64         `db:"comments"`    // 评论数量
		Score      uint64         `db:"score"`       // 评分，1~5分，乘10保存，避免小数
		OpenHours  sql.NullString `db:"open_hours"`  // 营业时间，例如 10:00-22:00
		CreateTime time.Time      `db:"create_time"` // 创建时间
		UpdateTime time.Time      `db:"update_time"` // 更新时间
	}
)

func newTbShopModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTbShopModel {
	return &defaultTbShopModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`tb_shop`",
	}
}

func (m *defaultTbShopModel) Delete(ctx context.Context, id uint64) error {
	hmdpTbShopIdKey := fmt.Sprintf("%s%v", cacheHmdpTbShopIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, hmdpTbShopIdKey)
	return err
}

func (m *defaultTbShopModel) FindOne(ctx context.Context, id uint64) (*TbShop, error) {
	hmdpTbShopIdKey := fmt.Sprintf("%s%v", cacheHmdpTbShopIdPrefix, id)
	var resp TbShop
	err := m.QueryRowCtx(ctx, &resp, hmdpTbShopIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbShopRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbShopModel) Insert(ctx context.Context, data *TbShop) (sql.Result, error) {
	hmdpTbShopIdKey := fmt.Sprintf("%s%v", cacheHmdpTbShopIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, tbShopRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.TypeId, data.Images, data.Area, data.Address, data.X, data.Y, data.AvgPrice, data.Sold, data.Comments, data.Score, data.OpenHours)
	}, hmdpTbShopIdKey)
	return ret, err
}

func (m *defaultTbShopModel) Update(ctx context.Context, data *TbShop) error {
	hmdpTbShopIdKey := fmt.Sprintf("%s%v", cacheHmdpTbShopIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tbShopRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.TypeId, data.Images, data.Area, data.Address, data.X, data.Y, data.AvgPrice, data.Sold, data.Comments, data.Score, data.OpenHours, data.Id)
	}, hmdpTbShopIdKey)
	return err
}

func (m *defaultTbShopModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheHmdpTbShopIdPrefix, primary)
}

func (m *defaultTbShopModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbShopRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTbShopModel) tableName() string {
	return m.table
}
